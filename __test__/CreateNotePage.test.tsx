// Import de React et des outils de test pour React Native
import React from "react";
import { render, fireEvent, waitFor } from "@testing-library/react-native";

// Le composant qu‚Äôon teste : la page de cr√©ation de note
import CreateNotePage from "@/app/notes/create";

// Import d'Alert pour tester les messages d‚Äôerreur affich√©s √† l‚Äôutilisateur
import { Alert } from "react-native";

// ------------------------------
// üî∂ 1Ô∏è‚É£ MOCKS
// ------------------------------

// On simule la navigation de React Navigation
jest.mock("@react-navigation/native", () => ({
    useNavigation: () => ({
        goBack: jest.fn(), // simule la fonction de retour
    }),
}));

// On simule SecureStore (r√©cup√©ration du token)
jest.mock("expo-secure-store", () => ({
    getItemAsync: jest.fn(() => Promise.resolve("fake-token")),
}));

// On espionne l‚Äôappel √† Alert.alert (sans emp√™cher son ex√©cution ici)
jest.spyOn(Alert, "alert");

// ------------------------------
// üî∂ 2Ô∏è‚É£ SUITE DE TESTS
// ------------------------------

describe("üìù CreateNotePage", () => {

    // üî∏ Test : alerte si on essaie de cr√©er une note sans titre
    it("affiche une alerte si l'on essaie de cr√©er une note sans titre", async () => {

        // 4Ô∏è‚É£ On rend le composant CreateNotePage
        const { getByPlaceholderText, getByText } = render(<CreateNotePage />);

        // 5Ô∏è‚É£ On simule l'entr√©e de l'utilisateur : il √©crit du contenu
        // mais laisse le champ "titre" vide
        fireEvent.changeText(getByPlaceholderText("Contenu de la note"), "Contenu test");

        // 6Ô∏è‚É£ Il clique sur le bouton "Cr√©er la note"
        fireEvent.press(getByText("Cr√©er la note"));

        // 7Ô∏è‚É£ On v√©rifie qu‚Äôune alerte est affich√©e avec le bon message
        await waitFor(() => {
            expect(Alert.alert).toHaveBeenCalledWith("Validation", "Le titre ne peut pas √™tre vide.");
        });
    });
});
